plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'org.jetbrains.kotlin.jvm'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "kubescript-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url = "https://maven.saps.dev/minecraft"
        content { includeGroup "dev.latvian.mods" }
    }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
}

dependencies {
    forge "net.minecraftforge:forge:${project.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    modApi "dev.architectury:architectury-forge:${project.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    modImplementation("dev.latvian.mods:kubejs-forge:${kube_ver}")
    modImplementation("dev.latvian.mods:rhino-forge:${rhino_ver}")
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixex_ver}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${mixex_ver}"))

    implementation('thedarkcolour:kotlinforforge:3.12.0')
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
